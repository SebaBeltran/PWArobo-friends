{"version":3,"sources":["Components/Header.js","Components/Card.js","Components/CardList.js","Components/ErrorBoundry.js","Components/Scroll.js","Components/SearchBox.js","Components/Robots.js","ducks/actions.js","ducks/types.js","App.js","ducks/requestReducer.js","ducks/searchReducer.js","ducks/rootReducer.js","serviceWorker.js","index.js"],"names":["Header","props","className","Card","name","username","email","alt","src","CardList","mappedRobots","robots","map","robot","id","key","ErrorBoundry","state","hasError","error","errorInfo","this","setState","children","Component","Scroll","style","overflowY","border","height","SearchBox","handleInput","aria-label","placeholder","type","onChange","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchField","event","payload","onRequestRobots","fetch","then","res","json","data","catch","err","useState","filteredRobots","setFilteredRobots","useEffect","filtered","filter","toLocaleLowerCase","includes","e","target","value","App","initialState","rootReducer","combineReducers","action","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4243f5d3.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = props => {\n  return <h1 className=\"f1\">RoboFriends</h1>\n}\n\nexport default Header","import React from 'react'\n\nconst Card = ({name, username, email}) => {\n  return(\n    <div className='bg-light-green dib br3 pa3 ma2 grow tc bw1 shadow-5'>\n      <img alt=\"robot\" src={`https://robohash.org/${username}?size=200x200`} />\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  )    \n}\n\nexport default Card","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n  const mappedRobots = robots.map(robot => {\n    const {id, name, username, email} = robot\n    return(\n      <Card\n        key={id}\n        name={name}\n        username={username}\n        email={email}\n      />\n    )\n  })\n  return (\n    <>\n      {mappedRobots}\n    </>\n  );\n}\n\nexport default CardList;\n","import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, errorInfo){\n    this.setState({hasError: true})\n  }\n\n  render(){\n    const { hasError } = this.state\n    const { children } = this.props\n    if(hasError){\n      return <h1>Ooops! Something went wrong</h1>\n    }\n    else{\n      return children\n    }\n  }\n}\n\nexport default ErrorBoundry","import React from 'react'\n\nconst Scroll = ({children}) => {\n\n  return (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n    {children}\n    </div>\n  )\n}\n\nexport default Scroll","import React from 'react'\n\nconst SearchBox = ({handleInput}) => {\nreturn (\n  <div className=\"pa2\">\n    <input \n    aria-label=\"Search robots\"\n    className=\"pa3 ba b--green bg-lightest-blue\"\n    placeholder=\"search robots\" \n    type=\"search\"\n    onChange={handleInput}\n    />\n  </div>\n)\n}\n\nexport default SearchBox","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { requestRobots, setSearchField } from '../ducks/actions';\nimport CardList from './CardList';\nimport ErrorBoundry from './ErrorBoundry';\nimport Scroll from './Scroll';\nimport SearchBox from './SearchBox';\n\nconst Robots = props => {\n  const [filteredRobots, setFilteredRobots] = useState([]);\n\n  const handleInput = (e) => {\n    props.onSearchField(e.target.value)\n  }\n  const {onRequestRobots, robots, isPending, error} = props\n  useEffect(() => {\n    onRequestRobots()\n  },[onRequestRobots])\n\n  useEffect(() => {\n   const filtered = robots.filter(robot => robot.name.toLocaleLowerCase().includes(props.searchField.toLocaleLowerCase()))\n   setFilteredRobots(filtered)\n  }, [robots, props.searchField])\n\n\n  return(\n    error \n    ? <h1>Oops!</h1> \n    : (\n    <>\n      <SearchBox handleInput={handleInput} />\n      {isPending \n      ? <h1 className=\"f2\">Loading...</h1>\n      : <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots}/>\n          </ErrorBoundry>\n        </Scroll>  \n      }\n    </>)\n  )\n}\n\nconst mapStateToProps = state =>({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending,\n  error: state.requestRobots.error\n})\nconst mapDispatchToProps = dispatch =>({\n  onSearchField: event => dispatch(setSearchField(event)),\n  onRequestRobots: () => dispatch(requestRobots())\n})\n export default connect(mapStateToProps, mapDispatchToProps)(Robots)","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS } from './types';\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => dispatch => {\n  dispatch({type: REQUEST_ROBOTS_PENDING})\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(res => res.json())\n  .then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCESS, \n    payload: data}\n    ))\n  .catch(err => dispatch({\n    type: REQUEST_ROBOTS_FAILED, \n    payload: err}\n    ));\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\"\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\"","import React from 'react';\nimport Header from './Components/Header'\nimport Robots from './Components/Robots';\n\nfunction App() {\n  return (\n    <div className=\"tc\">\n      <Header />\n      <Robots />\n    </div>  \n  );\n}\n\nexport default App;\n","import { REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS } from './types';\n\nconst initialState = {\n  isPending: false,\n  robots:[],\n  error: ''\n}\n\nexport const requestRobots = (state = initialState, action={})=>{\n  const { type, payload } = action\n  switch(type){\n    case REQUEST_ROBOTS_PENDING:\n      return{\n        ...state,\n        isPending: true\n      };\n    case REQUEST_ROBOTS_SUCCESS:\n      return{\n        ...state,\n        isPending: false,\n        robots: payload\n    };\n    case REQUEST_ROBOTS_FAILED:{\n      return{\n        ...state,\n        isPending: false,\n        error: payload\n      }\n    }\n    default:\n      return state\n  }\n}","import { CHANGE_SEARCH_FIELD } from './types';\nconst initialState = {\n  searchField: '',\n}\n\nexport const searchRobots = (state=initialState, action={}) => {\n  const { type, payload } = action\n  switch(type){\n    case(CHANGE_SEARCH_FIELD):\n      return(\n        {...state,\n          searchField: payload\n        }\n      );\n    default: \n       return state\n  }\n}","import { combineReducers } from 'redux'\nimport { requestRobots } from './requestReducer'\nimport { searchRobots } from './searchReducer'\n\nexport const rootReducer = combineReducers({\n  searchRobots,\n  requestRobots\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport 'tachyons';\nimport App from './App';\nimport './index.css';\nimport { rootReducer } from './ducks/rootReducer';\nimport * as serviceWorker from './serviceWorker';\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register(); \n"],"sourceRoot":""}